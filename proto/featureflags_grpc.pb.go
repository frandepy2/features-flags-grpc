// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/featureflags.proto

package featureflags

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeatureFlags_GetFeature_FullMethodName   = "/featureflags.FeatureFlags/GetFeature"
	FeatureFlags_SetFeature_FullMethodName   = "/featureflags.FeatureFlags/SetFeature"
	FeatureFlags_WatchFeature_FullMethodName = "/featureflags.FeatureFlags/WatchFeature"
)

// FeatureFlagsClient is the client API for FeatureFlags service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureFlagsClient interface {
	GetFeature(ctx context.Context, in *FeatureRequest, opts ...grpc.CallOption) (*FeatureResponse, error)
	SetFeature(ctx context.Context, in *FeatureConfig, opts ...grpc.CallOption) (*FeatureAck, error)
	WatchFeature(ctx context.Context, in *FeatureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FeatureResponse], error)
}

type featureFlagsClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureFlagsClient(cc grpc.ClientConnInterface) FeatureFlagsClient {
	return &featureFlagsClient{cc}
}

func (c *featureFlagsClient) GetFeature(ctx context.Context, in *FeatureRequest, opts ...grpc.CallOption) (*FeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureResponse)
	err := c.cc.Invoke(ctx, FeatureFlags_GetFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagsClient) SetFeature(ctx context.Context, in *FeatureConfig, opts ...grpc.CallOption) (*FeatureAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureAck)
	err := c.cc.Invoke(ctx, FeatureFlags_SetFeature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagsClient) WatchFeature(ctx context.Context, in *FeatureRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FeatureResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FeatureFlags_ServiceDesc.Streams[0], FeatureFlags_WatchFeature_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FeatureRequest, FeatureResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureFlags_WatchFeatureClient = grpc.ServerStreamingClient[FeatureResponse]

// FeatureFlagsServer is the server API for FeatureFlags service.
// All implementations must embed UnimplementedFeatureFlagsServer
// for forward compatibility.
type FeatureFlagsServer interface {
	GetFeature(context.Context, *FeatureRequest) (*FeatureResponse, error)
	SetFeature(context.Context, *FeatureConfig) (*FeatureAck, error)
	WatchFeature(*FeatureRequest, grpc.ServerStreamingServer[FeatureResponse]) error
	mustEmbedUnimplementedFeatureFlagsServer()
}

// UnimplementedFeatureFlagsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureFlagsServer struct{}

func (UnimplementedFeatureFlagsServer) GetFeature(context.Context, *FeatureRequest) (*FeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedFeatureFlagsServer) SetFeature(context.Context, *FeatureConfig) (*FeatureAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeature not implemented")
}
func (UnimplementedFeatureFlagsServer) WatchFeature(*FeatureRequest, grpc.ServerStreamingServer[FeatureResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchFeature not implemented")
}
func (UnimplementedFeatureFlagsServer) mustEmbedUnimplementedFeatureFlagsServer() {}
func (UnimplementedFeatureFlagsServer) testEmbeddedByValue()                      {}

// UnsafeFeatureFlagsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureFlagsServer will
// result in compilation errors.
type UnsafeFeatureFlagsServer interface {
	mustEmbedUnimplementedFeatureFlagsServer()
}

func RegisterFeatureFlagsServer(s grpc.ServiceRegistrar, srv FeatureFlagsServer) {
	// If the following call pancis, it indicates UnimplementedFeatureFlagsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureFlags_ServiceDesc, srv)
}

func _FeatureFlags_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlags_GetFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).GetFeature(ctx, req.(*FeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlags_SetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagsServer).SetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlags_SetFeature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagsServer).SetFeature(ctx, req.(*FeatureConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlags_WatchFeature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FeatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureFlagsServer).WatchFeature(m, &grpc.GenericServerStream[FeatureRequest, FeatureResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FeatureFlags_WatchFeatureServer = grpc.ServerStreamingServer[FeatureResponse]

// FeatureFlags_ServiceDesc is the grpc.ServiceDesc for FeatureFlags service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureFlags_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "featureflags.FeatureFlags",
	HandlerType: (*FeatureFlagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _FeatureFlags_GetFeature_Handler,
		},
		{
			MethodName: "SetFeature",
			Handler:    _FeatureFlags_SetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchFeature",
			Handler:       _FeatureFlags_WatchFeature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/featureflags.proto",
}
